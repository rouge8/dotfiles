" change the mapleader from \ to ,
let mapleader=','

if &shell =~# 'fish$'
  set shell=bash
endif

" vim-plug configuration
source $HOME/.bundles.vim

" Highlight fenced code blocks
" ref: https://github.com/tpope/vim-markdown/commit/b2697b0adfe5428b86c8470a5f9d8da667bb2785
let g:markdown_fenced_languages = ['python', 'rust']

" Enable soft-wrapping for text files
augroup softwrap
  au!
  au FileType text,markdown,html,xhtml,eruby setlocal wrap linebreak nolist
augroup END

" Terraform
let g:terraform_fmt_on_save=1

" Rust
let g:rustfmt_autosave=1

" Fish
" Set up :make to use fish for syntax checking.
augroup fish
  au!
  au FileType fish compiler fish
augroup END

" Filetype detection for *.symlink files
" If a file begins with '#!/', let vim autodetect the filetype. Otherwise
" read 'linguist-language' from .gitattributes.
augroup symlink
  au!
  au BufRead,BufNewFile *.symlink
        \ if getline(1) !~ '#!/' |
        \ let &ft=split(system('cd '.shellescape(expand('%:p:h')).' && git check-attr linguist-language '.shellescape(expand('%:p'))))[-1] |
        \ endif
augroup END

syntax on

set modeline
set modelines=0

set scrolloff=3
set showcmd
set hidden
set wildmode=list:longest
set visualbell
" used by vim-gitgutter
set updatetime=100

" VIM-only config
if !has('nvim')
  set ttyfast
endif

" git-messenger
let g:git_messenger_include_diff = 'current'

" make searching not suck
nnoremap / /\v
xnoremap / /\v
set ignorecase
set smartcase
set gdefault
set incsearch
set showmatch
set hlsearch
noremap <leader><space> :noh<cr>:call clearmatches()<cr>

"makes j and k go by screen lines
nnoremap j gj
nnoremap k gk

" Mouse settings
set mouse=a

set title

" ALE linters
let g:ale_linters = {'rust': ['analyzer']}

" List all ALE linter errors
command! Errors lwindow

" Nav between ALE linter results
nnoremap <up> :ALEPreviousWrap<cr>zvzz
nnoremap <down> :ALENextWrap<cr>zvzz

" Autocomplete with ALE
let g:ale_completion_enabled = 1
" Right arrow accepts completions
inoremap <expr> <Right> pumvisible() ? "\<C-y>" : "\<Right>"
" Tab accepts completions
inoremap <expr> <Tab> pumvisible() ? "\<C-y>" : "\<Tab>"

" Remap ALE's completion menu to automatically select (but not insert) the
" first result
"
" Based on https://github.com/tpope/vim-commentary/issues/84#issuecomment-285878827
function! RemapAleCompletion()
  " Load ALE's completion functions and the <Plug>(ale_show_completion_menu)
  " mapping so that we can unmap it
  call ale#completion#GetCompletions('ale-manual')

  " Remap <C-x><C-o> to not deselect the first completion result
  iunmap <Plug>(ale_show_completion_menu)
  inoremap <silent> <Plug>(ale_show_completion_menu) <C-x><C-o>
endfunction

augroup remap_ale_completion
  autocmd!
  autocmd VimEnter * call RemapAleCompletion()
augroup END

" toggle paste mode
nmap <LocalLeader>pp :set paste!<cr>

" Resize splits when the window is resized
augroup resize_splits
  au!
  au VimResized * exe "normal! \<c-w>="
augroup END

" Splits open in reasonable places
set splitright
set splitbelow

" color
if &term ==# 'xterm-kitty'
  " https://sw.kovidgoyal.net/kitty/faq.html#using-a-color-theme-with-a-background-color-does-not-work-well-in-vim
  let &t_ut=''
endif

if has('termcolors')
  set termguicolors
endif
set background=dark
colorscheme gruvbox

" gui
if has('gui_macvim')
  " set guifont=Ubuntu\ Mono\ derivative\ Powerline:h18
  " TODO: find a good patched font
  set guifont=Menlo:h18
endif

" vim-airline
" TODO: find a good patched font
" let g:airline_powerline_fonts=1
set laststatus=2 " Always show the statusline

" Highlight VCS conflict markers
match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'

" find merge conflict markers
nmap <silent> <leader>fc <ESC>/\v^[<=>]{7}( .*\|$)<CR>

" git status
nmap <Leader>g :Git<CR>gg<c-n>

" Remove any trailing whitespace that is in the file
augroup remove_trailing_whitespace
  au!
  au BufRead,BufWrite * if ! &bin | silent! %s/\s\+$//ge | endif
augroup END

" DEATH TO F1
map <F1> <Esc>
imap <F1> <Esc>

" fzf
command! -bang -nargs=? -complete=dir GitFiles
      \ call fzf#vim#files(FugitiveWorkTree(), fzf#vim#with_preview(), <bang>0)
nnoremap <C-p> :GitFiles<Cr>

"" MAKE .swp~ AND .un~ FILES LESS ANNOYING
"" FROM <http://stackoverflow.com/a/9528322/609144>
" Save your backups to `~/.vim-backup` or `.` only if that fails.
if isdirectory($HOME . '/.vim-backup') == 0
  silent !mkdir -p ~/.vim-backup >/dev/null 2>&1
endif
set backupdir-=.
set backupdir+=.
set backupdir-=~/
set backupdir^=~/.vim-backup/
set backup

" Save your swp files to `~/.vim-swap` or `.` only if that fails.
if isdirectory($HOME . '/.vim-swap') == 0
  silent !mkdir -p ~/.vim-swap >/dev/null 2>&1
endif
set directory=~/.vim-swap//
set directory+=.

" undofile - This allows you to use undos after exiting and restarting
" :help undo-persistence
if isdirectory($HOME . '/.vim-undo') == 0
  silent !mkdir -p ~/.vim-undo > /dev/null 2>&1
endif
set undodir+=~/.vim-undo//
set undofile

" clam.vim
nnoremap ! :Clam<space>

" Unfuck everything by redrawing the screen and stopping all LSPs
"
" TODO: Restart the LSPs: https://github.com/dense-analysis/ale/issues/2201
noremap U :syntax sync fromstart<cr>:redraw!<cr>:ALEStopAllLSPs<cr>

" Scrollbinding
set scrollopt+=hor
nmap <LocalLeader>s :set scrollbind<cr>

" Change-inside-surroundings.vim
nmap <leader>cis :ChangeInsideSurrounding<cr>

" vim-commentary
nmap <leader>cc gcc
xmap <leader>cc gc

" highlight column after 'textwidth' (e.g. 99 in Rust), but default to 80
function! ColorColumn()
  if !exists('+colorcolumn')
    return
  endif

  if &textwidth > 0
    set colorcolumn=+1
  else
    set colorcolumn=80
  endif
endfunction
" Set the color column whenever we enter a buffer. This let us do things like
" ':e newfile.rs' and get 'colorcolumn=100' and ':e newfile.py' and get
" 'colorcolumn=80' all in the same session!
augroup colorcolumn
  au!
  au BufEnter * call ColorColumn()
augroup END

" Rainbow Parentheses
augroup rainbow_parentheses
  au!
  au VimEnter * RainbowParenthesesToggle
  au Syntax * RainbowParenthesesLoadRound
  au Syntax * RainbowParenthesesLoadSquare
augroup END

" Treat underscore as word delimiter
set iskeyword-=_

" Gundo
nnoremap <F5> :GundoToggle<CR>

" numbers.vim in vim 7.4+
if v:version >= 704
  set number
endif


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Miscellaneous autocmds

" Thaks @eevee: <https://github.com/eevee/rc/commit/376f4d6d59301c496cb9100fb562528c391f6485>
" Automatically delete swapfiles older than the actual file.
" Look at this travesty.  vim already has this information but doesn't expose
" it, so I have to reparse the swap file.  Ugh.
function! s:SwapDecide()
python << endpython
import os
import struct

import vim

# Format borrowed from:
# https://github.com/nyarly/Vimrc/blob/master/swapfile_parse.rb
SWAPFILE_HEADER = "=BB10sLLLL40s40s898scc"
size = struct.calcsize(SWAPFILE_HEADER)
with open(vim.eval('v:swapname'), 'rb') as f:
    buf = f.read(size)
(
    id0, id1, vim_version, pagesize, writetime,
    inode, pid, uid, host, filename, flags, dirty
) = struct.unpack(SWAPFILE_HEADER, buf)

try:
    # Test whether the pid still exists.  Could get fancy and check its name
    # or owning uid but :effort:
    os.kill(pid, 0)
except OSError:
    # NUL means clean, \x55 (U) means dirty.  Yeah I don't know either.
    if dirty == b'\x00':
        # Appears to be from a crash, so just nuke it
        vim.command('let v:swapchoice = "d"')

endpython
endfunction

if has('python')
  augroup eevee_swapfile
    au!
    au SwapExists * call s:SwapDecide()
  augroup END
endif


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
