#!/usr/bin/env python
from datetime import date, timedelta, datetime
import requests
import clint
from clint.textui import puts, indent
from bs4 import BeautifulSoup

BURTON = 'http://www.cafebonappetit.com/menu/your-cafe/carleton/cafes/details/35/burton'
LDC = 'http://www.cafebonappetit.com/menu/your-cafe/carleton/cafes/details/36/east-hall'

def parse_menu(table):
    menu = {}

    for row in table.find_all('tr'):
        for col in row.find_all('td'):
            if 'colspan' in col.attrs and col.attrs['colspan'] == '3':
                meal = col.text.strip()
                menu[meal] = []
            elif 'description' in col.attrs['class']:
                if col.p:
                    menu[meal].append(' '.join([line.strip() for line in col.p.text.split()]))
                else:
                    menu[meal].append(' '.join([line.strip() for line in col.text.split()]))

    return menu

def get_meal(day, meal):
    b = BeautifulSoup(requests.get(BURTON).content)
    l = BeautifulSoup(requests.get(LDC).content)
    halls = ((b, 'Burton'), (l, 'LDC'))

    menus = {}

    for h, name in halls:
        _ = 'time_' + str(day.day) + '_' + str(day.month).zfill(2)

        label = h.find(attrs={'name': _})

        menu = parse_menu(label.parent.next_sibling.next_sibling)
        menus[name] = menu[meal]

    return menus

def print_eggs(menus):
    for hall, meal in menus.iteritems():
        puts(hall)

        with indent(4):
            if 'eggs' in '\n'.join(meal).lower():
                for food in meal:
                    if 'eggs' in food.lower():
                        puts(food)
            else:
                puts('NO EGGS. :(')


def print_menus(menus):
    for hall, meal in menus.iteritems():
        puts(hall)

        with indent(4):
            for food in meal:
                puts(food)

        print

def pick_meal(time):
    lunch = datetime(time.year, time.month, time.day, 14, 0)
    brunch = datetime(time.year, time.month, time.day, 13, 0)
    dinner = datetime(time.year, time.month, time.day, 20, 0)

    if not time.weekday() in (5, 6): # not a weekend
        if time > lunch and time < dinner:
            return 'Dinner'
        else:
            return 'Lunch'
    else:
        if time > brunch and time < dinner:
            return 'Dinner'
        else:
            return 'Brunch'

def _usage():
    import sys
    print >> sys.stderr, 'USAGE: meals <breakfast|brunch|lunch|dinner> [--eggs] [--tomorrow]'
    sys.exit(1)

if __name__ == '__main__':
    meal = clint.args.not_flags.get(0)
    date = date.today()

    if clint.args.flags.contains('--eggs'):
        EGGS = True
    else:
        EGGS = False

    if clint.args.flags.contains('--tomorrow'):
        date += timedelta(days=1)

    if meal and not meal.title() in ['Breakfast', 'Lunch', 'Dinner', 'Brunch']:
        _usage()
    elif not meal:
        meal = pick_meal(datetime.now())

    m = get_meal(date, meal.title())

    if EGGS:
        print_eggs(m)
    else:
        print_menus(m)
